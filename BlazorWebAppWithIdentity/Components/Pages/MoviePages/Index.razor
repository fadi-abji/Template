@page "/movies"
@using Core.Movie.Interfaces
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@* @implements IAsyncDisposable *@
@inject IMovieApi movieApi
@rendermode RenderMode.InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<p>

    @*  ++++++++++++++++++ Client filtering ++++++++++++++++++*@
   @*   <form action="/movies" data-enhance data-permanent>
        <input type="search" name="titleFilter" />
        <input type="submit" value="Search" />
    </form>  *@

    @*  ++++++++++++++++++ Server filtering ++++++++++++++++++*@
    <input type="search" @bind="titleFilter" @bind:event="oninput" />
</p>

<p>
    <a href="movies/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredMovies" Pagination="pagination">
    <PropertyColumn Property="movie => movie.Title" Sortable="true"/>
    <PropertyColumn Property="movie => movie.ReleaseDate" />
    <PropertyColumn Property="movie => movie.Genre" />
    <PropertyColumn Property="movie => movie.Price" />
    <PropertyColumn Property="movie => movie.Rating" />

    <TemplateColumn Context="movie">
        <a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
        <a href="@($"movies/details?id={movie.Id}")">Details</a> |
        <a href="@($"movies/delete?id={movie.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
    // ++++++++++++++ client filtering +++++++++++++++++++
    // [SupplyParameterFromQuery]
    // private string? TitleFilter { get; set; }

    // private IQueryable<Movie> FilteredMovies =>
    //    context.Movie.Where(m => m.Title!.Contains(TitleFilter ?? string.Empty));

    //==============================================================================
    // +++++++++++++ server filtering ++++++++++++++++++++
    // private string titleFilter = string.Empty;

    // private IQueryable<Movie> FilteredMovies =>
    //     context.Movie.Where(m => m.Title!.Contains(titleFilter));
    //==============================================================================

    private string titleFilter = string.Empty;

    private IQueryable<Core.Movie.Dtos.Movie> FilteredMovies
    {
        get
        {
            return movies.AsQueryable().Where(m => m.Title!.Contains(titleFilter));
        }
    }

    private List<Core.Movie.Dtos.Movie> movies = new List<Core.Movie.Dtos.Movie>();

    private PaginationState pagination = new PaginationState { ItemsPerPage = 2 };

    protected async override Task OnInitializedAsync()
    {
        movies = (await movieApi.GetAllMovies());
    }

    //public async ValueTask DisposeAsync() => await movies.DisposeAsync();
}
