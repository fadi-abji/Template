@page "/movies/create"
@using Core.Movie.Apis
@using Core.Movie.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Dto;
@inject IMovieApi movieApi
@inject IMediaApi mediaApi
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Movie</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Movie" OnValidSubmit="AddMovie" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Movie.Title" class="form-control" /> 
                <ValidationMessage For="() => Movie.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="releasedate" class="form-label">ReleaseDate:</label> 
                <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" /> 
                <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label> 
                <InputText id="genre" @bind-Value="Movie.Genre" class="form-control" /> 
                <ValidationMessage For="() => Movie.Genre" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label> 
                <InputNumber id="price" @bind-Value="Movie.Price" class="form-control" /> 
                <ValidationMessage For="() => Movie.Price" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="rating" class="form-label">Rating:</label>
                <InputText id="rating" @bind-Value="Movie.Rating" class="form-control" />
                <ValidationMessage For="() => Movie.Rating" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="file" class="form-label">Upload Media Files:</label>
                <InputFile id="file" OnChange="HandleFileSelected" class="form-control" multiple/>
                <ValidationMessage For="() => SelectedFiles" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Movie Movie { get; set; } = new();
    private List<IBrowserFile> SelectedFiles { get; set; } = new();
    private string uploadStatus;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMovie()
    {
        Movie.MovieMedias = new List<MovieMedia>();

        foreach (var file in SelectedFiles)
        {
            var mediaDto = await mediaApi.AddMedia(); 

            var stream = file.OpenReadStream(maxAllowedSize: 5_000_00); // Example: 500KB max size
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            

            Movie.MovieMedias.Add(new MovieMedia
                {
                    MovieId = Movie.Id,
                    MediaUid = mediaDto.Uid.ToString() // create a new media with a unique identifier and put it here
                });
        }

        // Call the API to save the movie and upload files
        await movieApi.AddMovie(Movie);
        NavigationManager.NavigateTo("/movies");
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFiles = e.GetMultipleFiles().ToList(); // Capture multiple files
        e.File.OpenReadStream(maxAllowedSize: 5_000_00); // Limit file size to 500KB
    }
}
